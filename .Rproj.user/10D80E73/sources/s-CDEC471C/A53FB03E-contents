lpmf_est <- function(data,
                    dim,
                    eps = 1e-4,
                    max_iter = 5e3,
                    alpha = 0.4,
                    beta = 0.7){
  
  M <- 340556
  N <- 278854
  
  # initialize parameters
  sig2 <- 1e-3
  sig2u <- 1
  sig2v <- 1
  
  # initialize U, V
  U <- matrix(rnorm(N*dim, sd = sqrt(sig2u)), nrow = dim)
  V <- matrix(rnorm(M*dim, sd = sqrt(sig2v)), nrow = dim)
  
  # define variables to record the process
  tr <- matrix(c(sig2, sig2u, sig2v), nrow = 3, ncol = max_iter+1)
  rownames(tr) <- c("sig2", "sig2u", "sig2v")
  ll <- list()
  pn <- c(sig2, sig2u, sig2v)
  #tr[[1]] <- pn
  for(iter in 1:max_iter){
    aux1 <- NULL
    #aux2 <- NULL
    #pn_old <- pn
    # get U, V with fixed parameters
    for(j in 1:max_iter){
      
      # record loss
      aux1[j] <- loss_lpmf(data, t(U), t(V), pn[1]/pn[2], pn[1]/pn[3])
      #browser()
      
      # calculate gradient
      grad <- grad_lpmf(data, t(U), t(V), pn[1]/pn[2], pn[1]/pn[3])
      grad_U <- t(grad$Ut)
      grad_V <- t(grad$Vt)
      #browser()
      
      # search for step size
      t <- 1e-3
      while(loss_lpmf(data, t(U-t*grad_U), t(V-t*grad_V), pn[1]/pn[2], pn[1]/pn[3]) > aux1[j] - alpha*t*(sum((grad_U)^2)+sum(grad_V^2))){
        t <- beta*t
        #browser()
      }
      
      #browser()
      
      # update U, V
      U <- U - t*grad_U
      V <- V - t*grad_V
      #browser()
      
      # check if convergent
      if(abs(loss_lpmf(data, t(U), t(V), pn[1]/pn[2], pn[1]/pn[3]) - aux1[j])/aux1[j] < eps){
        #ll <- c(ll, aux1)
        break
      }
      
    }
    #browser()
    # save U, V
    save(U, file = paste0("U/lpmf", iter, ".Rda"))
    save(V, file = paste0("V/lpmf", iter, ".Rda"))
    
    ll <- c(ll, list(aux1))
    # update parameters
    pn <- par_lpmf(data, t(U), t(V))
    #browser()
    pn[2] <- pn[2]/N/dim
    pn[3] <- pn[3]/M/dim
    
    # record parameters
    tr[, iter+1] <- pn
    #aux2 <- pn
    if(iter %% 1 == 0){
      browser()
    }
    
    # check if convergent
    #if(max(abs(pn_old - pn)) < eps){
    #  break
    #}
    
    if(all(abs(pn-tr[, iter])/tr[, iter] < eps ) ){
      break
    }
    
  }
  
  result <- list(U = U, V = V, parameters = tr[, iter], loss = ll, parameters.trace = tr[, 1:iter])
  
}