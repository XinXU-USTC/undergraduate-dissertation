---
title: "BPMF 3-30"
author:
  - XU, Xin
documentclass: ctexart
output:
  rticles::ctex:
    fig_caption: yes
    number_sections: yes
    toc: yes
---

```{r}
library(dplyr)
library(Rcpp)
```

# Data Pre-processing
```{r}
Ratings <- read.csv("archive/Ratings.csv")
Ratings_by_users <- group_by(Ratings, User.ID)
user.Rating <- Ratings_by_users %>% summarise(
  num = length(Book.Rating),
  avg.rating = mean(Book.Rating)
)
num.Rating <- group_by(user.Rating, num) %>% summarise(
  users = length(avg.rating)
)
```

```{r}
head(Ratings)
summary(Ratings)
head(Ratings_by_users)
head(user.Rating)
head(num.Rating)
```

## Getting Training Set and Test Set
```{r eval=FALSE}
train <- NULL
test <- NULL

for(user in user.Rating$User.ID){
  idx <- which(Ratings$User.ID == user)
  n <- length(idx)
  n.train <- ceiling(n*0.7)
  if(length(idx) > 1){
    idx.train <- sample(idx, size = n.train)
    idx.test <- setdiff(idx, idx.train)
    train.aux <- Ratings[idx.train, ]
    test.aux <- Ratings[idx.test, ]
    train <- rbind(train, train.aux)
    test <- rbind(test, test.aux)
  }else{
    train.aux <- Ratings[idx, ]
    train <- rbind(train, train.aux)
  }
}

write.csv(train, file = "train.csv")
write.csv(test, file = "test.csv")
```

## ISBN
```{r}
N <- max(Ratings$User.ID)
book_idx <- unique(Ratings$ISBN)
M <- length(book_idx)
book_idx <- 1:M
names(book_idx) <- unique(Ratings$ISBN)
train <- read.csv("archive/train.csv")
train$ISBN <- book_idx[train$ISBN]
test <- read.csv("archive/test.csv")
test$ISBN <- book_idx[test$ISBN]
```

```{r echo=FALSE}
cat(paste("There are", N, "users and", M, "books.\n"))
cat(paste("There are", nrow(train), "examples in the training set and", nrow(test), "examples in the test set."))
```

```{r}
summary(train)
summary(test)
```

# Visualizing Data
```{r}
table(Ratings$Book.Rating)
table(train$Book.Rating)
table(test$Book.Rating)
```

```{r}
par(mfrow=c(1, 2))
barplot(table(Ratings$Book.Rating), col = "blue")
barplot(table(Ratings$Book.Rating)[-1], col = "blue")
```

```{r}
par(mfrow=c(1, 2))
barplot(table(train$Book.Rating), col = "blue", xlab = "train")
barplot(table(test$Book.Rating), col = "blue", xlab = "test")
```

```{r}
par(mfrow=c(1, 2))
barplot(table(train$Book.Rating)[-1], col = "blue", xlab = "train")
barplot(table(test$Book.Rating)[-1], col = "blue", xlab = "test")
```

```{r}
par(mfrow = c(1, 3))
boxplot(Ratings$Book.Rating, xlab = "full data")
boxplot(train$Book.Rating, xlab = "train")
boxplot(test$Book.Rating, xlab = "test")
```

```{r}
grp <- list(0, 1:3, 4:6, 7:9,
            10:13, 14:17,
            18:19, 20:23, 24:50, 
            51:100, 100:1400)
grp_df <- lapply(grp, function(x){
  idx <- which(user.Rating$num %in% x)
  user <- user.Rating$User.ID[idx]
  user_idx <- which(test$User.ID %in% user)
  return(test[user_idx, ])
})
save(grp_df, file = "grp_df.Rda")
```

```{r}
sapply(grp_df, function(x){
  nrow(x)
})
```

```{r}
sapply(grp, function(x){
  idx <- which(num.Rating$num %in% x)
  return(sum(num.Rating$users[idx]))
})
```

# Results
```{r}
Rcpp::sourceCpp("cpp/pred_pmf.cpp")
Rcpp::sourceCpp("cpp/pred_lpmf.cpp")
```
## PMF
```{r}
load("result/pmf/1e-02-1e+00-1e+00/U2.Rda")
load("result/pmf/1e-02-1e+00-1e+00/U2.Rda")
test <- read.csv("test.csv")
test$ISBN <- book_idx[test$ISBN]
result <- pred_pmf(test, t(U), t(V))
cat(paste("rmae:", result$rmae, "\nrmse:", result$rmse))
test$pred <- result$prediction
```

```{r}
load("grp_df.Rda")
grp_df[[1]] <- NULL
grp_df[[1]] <- NULL

grp_rst <- lapply(grp_df, function(df){
  aux <-  pred_lpmf(df, t(U), t(V))
  cat(paste("\nrmae:", aux$rmae, "\trmse:", aux$rmse))
  df$pred <- aux$prediction
  return(df)
})
```

```{r}
head(test, 10)
```

## logistic PMF
$\sigma^2 = 1e-2, \, \sigma_u^2 = 3, \, \sigma_v^2 = 3$.
```{r}
load("result/lpmf/1e-2-3-3-1e-6/U.Rda")
load("result/lpmf/1e-2-3-3-1e-6/V.Rda")
test <- read.csv("test.csv")
test$ISBN <- book_idx[test$ISBN]
test$Book.Rating <- test$Book.Rating/10
result <-  pred_lpmf(test, t(U), t(V))
cat(paste("rmae:", result$rmae, "\nrmse:", result$rmse))
test$pred <- result$prediction
```
```{r}
load("grp_df.Rda")
grp_df[[1]] <- NULL
grp_df[[1]] <- NULL

grp_rst <- lapply(grp_df, function(df){
  df$Book.Rating <- df$Book.Rating/10
  aux <-  pred_lpmf(df, t(U), t(V))
  cat(paste("\nrmae:", aux$rmae, "\trmse:", aux$rmse))
  df$pred <- aux$prediction
  return(df)
})
```

```{r}
head(test, 10)
```

## Dimension of Trait Space
```{r echo=FALSE}
y <- matrix(0, nrow = 2, ncol = 5)
rownames(y) <- c("rmae", "rmse")
x <- c(2, 4, 10, 20, 50)
colnames(y) <- c(2, 4, 10, 20, 50)
load("result/lpmf/2/2U1.Rda")
load("result/lpmf/2/2V1.Rda")
test <- read.csv("test.csv")
test$ISBN <- book_idx[test$ISBN]
test$Book.Rating <- test$Book.Rating/10
result <-  pred_lpmf(test, t(U), t(V))
y[1, 1] <- result$rmae
y[2, 1] <- result$rmse
```

```{r echo=FALSE}
load("result/lpmf/4/4U1.Rda")
load("result/lpmf/4/4V1.Rda")
test <- read.csv("test.csv")
test$ISBN <- book_idx[test$ISBN]
test$Book.Rating <- test$Book.Rating/10
result <-  pred_lpmf(test, t(U), t(V))
y[1, 2] <- result$rmae
y[2, 2] <- result$rmse
```

```{r echo=FALSE}
load("result/lpmf/10/10U1.Rda")
load("result/lpmf/10/10V1.Rda")
test <- read.csv("test.csv")
test$ISBN <- book_idx[test$ISBN]
test$Book.Rating <- test$Book.Rating/10
result <-  pred_lpmf(test, t(U), t(V))
y[1, 3] <- result$rmae
y[2, 3] <- result$rmse
```

```{r echo=FALSE}
load("result/lpmf/20/20U1.Rda")
load("result/lpmf/20/20V1.Rda")
test <- read.csv("test.csv")
test$ISBN <- book_idx[test$ISBN]
test$Book.Rating <- test$Book.Rating/10
result <-  pred_lpmf(test, t(U), t(V))
y[1, 4] <- result$rmae
y[2, 4] <- result$rmse
```

```{r echo=FALSE}
load("result/lpmf/50/50U1.Rda")
load("result/lpmf/50/50V1.Rda")
test <- read.csv("test.csv")
test$ISBN <- book_idx[test$ISBN]
test$Book.Rating <- test$Book.Rating/10
result <-  pred_lpmf(test, t(U), t(V))
y[1, 5] <- result$rmae
y[2, 5] <- result$rmse
```

```{r echo=FALSE}
par(mfrow = c(1, 2))
plot(x, y[1, ], type = "l", col = "blue", xlab = "dim", ylab = "rmae")
points(x, y[1, ], pch = 20, col = "red")
plot(x, y[2, ], type = "l", col = "blue", xlab = "dim", ylab = "rmse")
points(x, y[2, ], pch = 20, col = "red")
```